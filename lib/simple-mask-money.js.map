{"version":3,"file":"simple-mask-money.js","sources":["../src/args.js","../src/core.js","../src/implanter.js","../src/index.js"],"sourcesContent":["module.exports = class Args {\r\n  constructor(args) {\r\n    this.afterFormat         = () => {}; \r\n    this.allowNegative       = false;  \r\n    this.beforeFormat        = () => {};  \r\n    this.negativeSignAfter   = false;\r\n    this.decimalSeparator    = ',';\r\n    this.fixed               = true;\r\n    this.fractionDigits      = 2;\r\n    this.prefix              = '';\r\n    this.suffix              = '';\r\n    this.thousandsSeparator  = '.';\r\n    this.cursor              = 'move';\r\n\r\n    this.merge(args);\r\n  }\r\n\r\n  merge(args) {\r\n    if (!args || typeof args !== 'object') return;\r\n\r\n    this.fractionDigits = typeof args.fractionDigits === 'undefined' || isNaN(args.fractionDigits) ? this.fractionDigits : parseInt(args.fractionDigits);\r\n    this.afterFormat    = typeof args.afterFormat    === 'function' ? args.afterFormat  : this.afterFormat;\r\n    this.beforeFormat   = typeof args.beforeFormat   === 'function' ? args.beforeFormat : this.beforeFormat;\r\n\r\n    this.fixed             = typeof args.fixed             === 'boolean' ? args.fixed             : this.fixed;\r\n    this.allowNegative     = typeof args.allowNegative     === 'boolean' ? args.allowNegative     : this.allowNegative;    \r\n    this.negativeSignAfter = typeof args.negativeSignAfter === 'boolean' ? args.negativeSignAfter : this.negativeSignAfter;\r\n\r\n    this.decimalSeparator   = typeof args.decimalSeparator   === 'undefined' ? this.decimalSeparator   : args.decimalSeparator;\r\n    this.prefix             = typeof args.prefix             === 'undefined' ? this.prefix             : args.prefix;\r\n    this.suffix             = typeof args.suffix             === 'undefined' ? this.suffix             : args.suffix;\r\n    this.thousandsSeparator = typeof args.thousandsSeparator === 'undefined' ? this.thousandsSeparator : args.thousandsSeparator;\r\n    this.cursor             = typeof args.cursor             === 'undefined' ? this.cursor             : args.cursor;\r\n  }\r\n};\r\n","const Args = require('./args');\r\nmodule.exports = class Core {\r\n  constructor(args) {\r\n    this.args = new Args(args);\r\n  }\r\n\r\n  addCompleter(value, completer, length, start = true) {\r\n    while (value.length < length) {\r\n      value = start ? `${completer}${value}` : `${value}${completer}`;\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  addPrefix(value) {\r\n    return `${this.args.prefix}${value}`;\r\n  }\r\n\r\n  addSeparators(value) {\r\n    let size = value.length - this.args.fractionDigits;\r\n    let character = this.args.fixed ? 'd' : 'w';\r\n    let regexp = `\\\\,?||\\\\.?(\\\\${character})`;\r\n    let hundreds = Math.ceil(size / 3);\r\n\r\n    let replacement = `${this.args.decimalSeparator}$${hundreds + 1}`;\r\n\r\n    for (let i = hundreds; i !== 0; i--) {\r\n      if (size >= 3) {\r\n        regexp = `(\\\\${character}{3})${regexp}`;\r\n        size -= 3;\r\n      } else {\r\n        regexp = `(\\\\${character}{${size}})${regexp}`;\r\n      }\r\n\r\n      if (i > 1) {\r\n        replacement = `${this.args.thousandsSeparator}$${i}${replacement}`;\r\n      } else {\r\n        replacement = `$${i}${replacement}`;\r\n      }\r\n    }\r\n\r\n    return value.replace(new RegExp(regexp), replacement);\r\n  }\r\n\r\n  addSuffix(value) {\r\n    return `${value}${this.args.suffix}`;\r\n  }\r\n\r\n  adjustDotPosition(value) {\r\n    let fractionDigits;\r\n    let result = value.toString();\r\n\r\n    result = result.replace('.', '');\r\n    fractionDigits = result.length - this.args.fractionDigits;\r\n    result = `${result.substring(0, fractionDigits)}.${result.substring(fractionDigits)}`;\r\n\r\n    return result;\r\n  }\r\n\r\n  completer(size = 1) {\r\n    return this.args.fixed ? ''.padEnd(size, '0') : ''.padEnd(size, '_');\r\n  }\r\n\r\n  checkNumberStart(value, separator) {\r\n    const result = value.toString();\r\n    return result[0] === separator ? `${this.args.fixed ? '0' : '_'}${result}` : result;\r\n  }\r\n\r\n  checkSuffix(value) {\r\n    let result;\r\n    const lastIndex = value.length - 1;\r\n    const lastButOneIndex = lastIndex - 1;\r\n    const currentLastSuffix = value.substring(lastIndex - this.args.suffix.length + 1, lastIndex + this.args.suffix.length);\r\n    const currentLastButOneSuffix = value.substring(lastButOneIndex - this.args.suffix.length + 1, lastButOneIndex + this.args.suffix.length);\r\n\r\n    switch (this.args.suffix) {\r\n      case currentLastSuffix:\r\n        result = value;\r\n        break;\r\n      case currentLastButOneSuffix:\r\n        var start = value.substring(0, lastButOneIndex);\r\n        result = `${start}${value.substring(value.length + this.args.suffix.length + 1, lastButOneIndex + this.args.suffix.length)}.`;\r\n        break;\r\n      default:\r\n        result = `${value.substring(0, lastIndex)}.`;\r\n        break;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  emptyOrInvalid() {\r\n    return `${this.completer()}${this.args.decimalSeparator}${this.completer(this.args.fractionDigits)}`;\r\n  }\r\n\r\n  isFloat(number) {\r\n    return number % 1 !== 0;\r\n  }\r\n\r\n  mask(value) {\r\n    const negative = this.args.allowNegative && value.indexOf('-') !== -1;\r\n    let result = `${this.writingToNumber(value) || this.emptyOrInvalid()}`;\r\n    result = this.replaceSeparator(result, this.args.decimalSeparator, '.');\r\n    const completer = this.completer();\r\n\r\n    if (!isNaN(this.removeCompleter(result, completer))) {\r\n      result = this.replaceSeparator(result, '.');\r\n      result = this.addCompleter(result || '', completer, this.args.fractionDigits);\r\n      result = this.args.fractionDigits >= result.length ? `${completer}${result}` : result;\r\n      result = this.addSeparators(result);\r\n    }\r\n\r\n    if (this.args.prefix) {\r\n      result = this.addPrefix(result);\r\n    }\r\n    if (this.args.suffix) {\r\n      result = this.addSuffix(result);\r\n    }\r\n\r\n    return `${!this.args.negativeSignAfter && negative ? '-' : ''}${result}${this.args.negativeSignAfter && negative ? '-' : ''}`;\r\n  }\r\n\r\n  numberToText(value) {\r\n    const completer = this.completer();\r\n    let result = this.emptyOrInvalid();\r\n    value = this.replaceSeparator(value.toString(), this.args.decimalSeparator, '.');\r\n\r\n    if (!isNaN(value)) {\r\n      if (this.isFloat(value)) {\r\n        const number = value.split('.');\r\n        let hundreds = number[0];\r\n        let decimals = number[1];\r\n\r\n        decimals = this.addCompleter(decimals || '', completer, this.args.fractionDigits, false);\r\n\r\n        result = `${hundreds}${decimals}`;\r\n      } else {\r\n        result = this.removeCompleter(value, completer);\r\n        result = this.addCompleter(result || '', completer, this.args.fractionDigits + result.length, false);\r\n      }\r\n      \r\n      result = this.addSeparators(result);\r\n      result = this.checkNumberStart(result, this.args.decimalSeparator);\r\n    }\r\n    \r\n    if (this.args.prefix) {\r\n      result = this.addPrefix(result);\r\n    }\r\n    if (this.args.suffix) {\r\n      result = this.addSuffix(result);\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  onlyNumber(value) {\r\n    const hasDecimalSeparator = value.toString().indexOf(this.args.decimalSeparator);\r\n    let putDecimalSeparator = false;\r\n    let result = '';\r\n\r\n    for (let i = value.length - 1; i >= 0; i--) {\r\n      if (isFinite(value[i]) || (!this.args.fixed && value[i] === '_')) {\r\n        result = value[i] + result;\r\n      } else if (hasDecimalSeparator !== -1 && !putDecimalSeparator && value[i] === this.args.decimalSeparator) {\r\n        result = value[i].replace(this.args.decimalSeparator, '.') + result;\r\n        putDecimalSeparator = true;\r\n      }\r\n    }\r\n\r\n\r\n    return result[0] === '.' ? `0${result}` : result;\r\n  }\r\n\r\n  removeCompleter(value, completer, start = true) {\r\n    const getPosition = () => start ? 0 : value.length - 1;\r\n    let position = getPosition();\r\n\r\n    while (value[position] === completer) {\r\n      value = value.substring(0, position - 1) + value.substring(position + 1, value.length);\r\n      position = getPosition();\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  removePrefix(value) {\r\n    const position = value.indexOf(this.args.prefix, 0);\r\n\r\n    if (position !== -1) {\r\n      value = value.substring(this.args.prefix.length, value.length);\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  removeSuffix(value) {\r\n    const position = value.indexOf(this.args.suffix, value.length - this.args.suffix.length);\r\n\r\n    if (position !== -1) {\r\n      const start = value.substring(0, position);\r\n      value = start + value.substring(start.length + this.args.suffix.length - 1, value.length - 1);\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  replaceSeparator(value, separator, replacer = '') {\r\n    return value.replace(new RegExp(`\\\\${separator}`, 'g'), replacer);\r\n  }\r\n\r\n  textToNumber(value) {\r\n    let result = value.toString();\r\n    let completer = this.completer();\r\n\r\n    if (this.args.prefix) {\r\n      result = this.removePrefix(result);\r\n    }\r\n\r\n    if (this.args.suffix) {\r\n      result = this.removeSuffix(result);\r\n    }\r\n\r\n    result = this.onlyNumber(result);\r\n\r\n    if (result) {\r\n      result = this.removeCompleter(result, completer);\r\n      result = this.checkNumberStart(result, '.');\r\n    }\r\n\r\n    return result || (this.args.fixed ? '0' : '');\r\n  }\r\n\r\n  writingToNumber(value) {\r\n    let result = value.toString();\r\n    let completer = this.completer();\r\n\r\n    if (this.args.prefix) {\r\n      result = this.removePrefix(result);\r\n    }\r\n\r\n    if (this.args.suffix) {\r\n      result = this.checkSuffix(result);\r\n      result = this.removeSuffix(result);\r\n    }\r\n\r\n    result = this.onlyNumber(result);\r\n\r\n    if (result) {\r\n      result = this.adjustDotPosition(result);\r\n\r\n      result = this.removeCompleter(result, completer);\r\n\r\n      result = this.checkNumberStart(result, '.');\r\n    }\r\n\r\n    return result || (this.args.fixed ? '0' : '');\r\n  }\r\n};\r\n","module.exports = {\r\n  getCaretPosition(input) {\r\n    let position = -1;\r\n    if ('selectionStart' in input) {\r\n      position = input.selectionStart;\r\n    } else if (document.selection) {\r\n      input.focus();\r\n      const range = document.selection.createRange();\r\n      const length = document.selection.createRange().text.length;\r\n      range.moveStart('character', -input.value.length);\r\n      position = range.text.length - length;\r\n    }\r\n    return position;\r\n  },\r\n\r\n  setCaretPosition(input, index) {\r\n    if (input.setSelectionRange) {\r\n      input.focus();\r\n      input.setSelectionRange(index, index);\r\n    } else if (input.createTextRange) {\r\n      const range = input.createTextRange();\r\n      range.collapse(true);\r\n      range.moveEnd('character', index);\r\n      range.moveStart('character', index);\r\n      range.select();\r\n    }\r\n  },\r\n\r\n  indexMove(newValue, oldValue, index) {\r\n    switch (true) {\r\n      case oldValue.length < newValue.length:\r\n        return index + 1;\r\n      case oldValue.length > newValue.length:\r\n        return index - 1;\r\n      default:\r\n        return index;\r\n    }\r\n  },\r\n\r\n  addPropertyMask(input, core) {\r\n    input.maskArgs = {};\r\n\r\n    for (const k in core.args) {\r\n      Object.defineProperty(input.maskArgs, k, {\r\n        get: () => core.args[k],\r\n        set: (value) => {\r\n          core.args[k] = value;\r\n          this.refreshMask(input);\r\n        }\r\n      });\r\n    }\r\n  },\r\n\r\n  addMask(input, core) {\r\n    input.addEventListener('input', e => {\r\n      const oldValue = input.value;\r\n      core.args.beforeFormat(oldValue);\r\n      const newValue = core.mask(oldValue);\r\n      const oldCaretPosition = this.getCaretPosition(input);\r\n      let newCaretPosition = this.indexMove(newValue, oldValue, oldCaretPosition);\r\n\r\n      if (input.maskArgs.cursor === 'start') {\r\n        newCaretPosition = 0;\r\n      } else if (input.maskArgs.cursor === 'end') {\r\n        newCaretPosition = newValue.length;\r\n      }\r\n\r\n      input.value = newValue;\r\n      input._value = newValue;\r\n\r\n      this.setCaretPosition(input, newCaretPosition);\r\n      core.args.afterFormat(newValue);\r\n      !(e instanceof Event) && this.refreshMask(input);\r\n    });\r\n  },\r\n\r\n  refreshMask(input) {\r\n    input.dispatchEvent(new Event('input'));\r\n  }\r\n};\r\n","const Args = require('./args');\r\nconst Core = require('./core');\r\nconst implanter = require('./implanter');\r\n\r\nlet _args = new Args();\r\n\r\nmodule.exports = class SimpleMaskMoney {\r\n  static get args() {\r\n    return _args;\r\n  }\r\n\r\n  static set args(value) {\r\n    _args = new Args(value);\r\n  }\r\n\r\n  static formatToCurrency(value, args) {\r\n    const core = new Core(typeof args !== 'undefined' && typeof args === 'object' ? args : _args);\r\n    core.args.beforeFormat(value);\r\n\r\n    const negative = core.args.allowNegative && value.indexOf('-') !== -1;  \r\n    const formatation = core.numberToText(core.textToNumber(value));\r\n    const result = `${!core.args.negativeSignAfter && negative ? '-': ''}${formatation}${core.args.negativeSignAfter && negative ? '-': ''}`;\r\n  \r\n    core.args.afterFormat(result);\r\n    \r\n    return result;\r\n  }\r\n\r\n  static formatToMask(input, args) {\r\n    const core = new Core(typeof args !== 'undefined' && typeof args === 'object' ? args : _args);\r\n    const value = input.toString(); \r\n    core.args.beforeFormat(value);\r\n\r\n    const result = core.mask(value);\r\n\r\n    core.args.afterFormat(result);\r\n    \r\n    return result;\r\n  }\r\n\r\n  static formatToNumber(input, args) {\r\n    const core = new Core(typeof args !== 'undefined' && typeof args === 'object' ? args : _args);\r\n    let value = input.toString(); \r\n    core.args.beforeFormat(value);\r\n    let result = '0';\r\n\r\n    const negative = core.args.allowNegative && value.indexOf('-') !== -1;   \r\n    \r\n    if (negative) {\r\n      value = value.replace('-', '');\r\n    }\r\n\r\n    value = core.textToNumber(value);\r\n    \r\n    if (!this.args.fixed) {\r\n      value = value.replace(new RegExp('_', 'g'), '');\r\n    }\r\n\r\n    if (!isNaN(value)) {\r\n      result = parseFloat(negative ? value * -1 : value);\r\n    }\r\n\r\n    core.args.afterFormat(result);\r\n      \r\n    return result;\r\n  }\r\n\r\n  static setMask(element, args) {\r\n    if (typeof document === 'undefined') throw 'This function only works on client side';\r\n\r\n    const input = typeof element == 'string' ? document.querySelector(element) : element;    \r\n    const core = new Core(typeof args !== 'undefined' && typeof args === 'object' ? args : _args);\r\n    \r\n    implanter.addPropertyMask(input, core);\r\n    implanter.addMask(input, core);\r\n    implanter.refreshMask(input);\r\n\r\n    input.formatToNumber = () => SimpleMaskMoney.formatToNumber(input.value, input.maskArgs);\r\n\r\n    return input;\r\n  }\r\n};\r\n"],"names":["module","args","afterFormat","allowNegative","beforeFormat","negativeSignAfter","decimalSeparator","fixed","fractionDigits","prefix","suffix","thousandsSeparator","cursor","merge","isNaN","this","parseInt","Args","value","completer","length","start","size","character","regexp","hundreds","Math","ceil","replacement","i","replace","RegExp","result","toString","substring","padEnd","separator","lastIndex","lastButOneIndex","currentLastSuffix","currentLastButOneSuffix","number","negative","indexOf","writingToNumber","emptyOrInvalid","replaceSeparator","removeCompleter","addCompleter","addSeparators","addPrefix","addSuffix","isFloat","split","decimals","checkNumberStart","hasDecimalSeparator","putDecimalSeparator","isFinite","getPosition","position","replacer","removePrefix","removeSuffix","onlyNumber","checkSuffix","adjustDotPosition","input","selectionStart","document","selection","focus","range","createRange","text","moveStart","index","setSelectionRange","createTextRange","collapse","moveEnd","select","newValue","oldValue","core","maskArgs","k","defineProperty","refreshMask","addEventListener","mask","oldCaretPosition","_this2","getCaretPosition","newCaretPosition","indexMove","_value","setCaretPosition","e","Event","dispatchEvent","_args","Core","formatation","numberToText","textToNumber","parseFloat","element","querySelector","addPropertyMask","addMask","formatToNumber","SimpleMaskMoney"],"mappings":"goBAAAA,4BACcC,8GACLC,YAAsB,kBACtBC,eAAsB,OACtBC,aAAsB,kBACtBC,mBAAsB,OACtBC,iBAAsB,SACtBC,OAAsB,OACtBC,eAAsB,OACtBC,OAAsB,QACtBC,OAAsB,QACtBC,mBAAsB,SACtBC,OAAsB,YAEtBC,MAAMZ,2CAGPA,GACCA,GAAwB,qBAATA,gBAAAA,WAEfO,oBAAgD,IAAxBP,EAAKO,gBAAkCM,MAAMb,EAAKO,gBAAkBO,KAAKP,eAAiBQ,SAASf,EAAKO,qBAChIN,YAAgD,mBAAxBD,EAAKC,YAAgCD,EAAKC,YAAea,KAAKb,iBACtFE,aAAgD,mBAAxBH,EAAKG,aAAgCH,EAAKG,aAAeW,KAAKX,kBAEtFG,MAAsD,kBAA3BN,EAAKM,MAAkCN,EAAKM,MAAoBQ,KAAKR,WAChGJ,cAAsD,kBAA3BF,EAAKE,cAAkCF,EAAKE,cAAoBY,KAAKZ,mBAChGE,kBAAsD,kBAA3BJ,EAAKI,kBAAkCJ,EAAKI,kBAAoBU,KAAKV,uBAEhGC,sBAAwD,IAA5BL,EAAKK,iBAAqCS,KAAKT,iBAAqBL,EAAKK,sBACrGG,YAAwD,IAA5BR,EAAKQ,OAAqCM,KAAKN,OAAqBR,EAAKQ,YACrGC,YAAwD,IAA5BT,EAAKS,OAAqCK,KAAKL,OAAqBT,EAAKS,YACrGC,wBAAwD,IAA5BV,EAAKU,mBAAqCI,KAAKJ,mBAAqBV,EAAKU,wBACrGC,YAAwD,IAA5BX,EAAKW,OAAqCG,KAAKH,OAAqBX,EAAKW,sQC/B9GZ,4BACcC,8GACLA,KAAO,IAAIgB,EAAKhB,kDAGViB,EAAOC,EAAWC,WAAQC,6DAC9BH,EAAME,OAASA,KACZC,KAAWF,EAAYD,KAAaA,EAAQC,SAG/CD,oCAGCA,YACEH,KAAKd,KAAKQ,OAASS,wCAGjBA,WACRI,EAAOJ,EAAME,OAASL,KAAKd,KAAKO,eAChCe,EAAYR,KAAKd,KAAKM,MAAQ,IAAM,IACpCiB,kBAAyBD,MACzBE,EAAWC,KAAKC,KAAKL,EAAO,GAE5BM,EAAiBb,KAAKd,KAAKK,sBAAoBmB,EAAW,GAErDI,EAAIJ,EAAgB,IAANI,EAASA,IAClB,GAARP,WACaC,SAAgBC,KACvB,WAEOD,MAAaD,OAASE,IAG/B,EAAJK,EACed,KAAKd,KAAKU,uBAAsBkB,EAAID,MAEnCC,EAAID,SAInBV,EAAMY,QAAQ,IAAIC,OAAOP,GAASI,qCAGjCV,YACEA,EAAQH,KAAKd,KAAKS,iDAGZQ,OACZV,EACAwB,EAASd,EAAMe,uBAEVD,EAAOF,QAAQ,IAAK,KACLV,OAASL,KAAKd,KAAKO,iBAC/BwB,EAAOE,UAAU,EAAG1B,OAAmBwB,EAAOE,UAAU1B,2CAK5Dc,yDAAO,SACRP,KAAKd,KAAKM,MAAQ,GAAG4B,OAAOb,EAAM,KAAO,GAAGa,OAAOb,EAAM,8CAGjDJ,EAAOkB,OAChBJ,EAASd,EAAMe,kBACdD,EAAO,KAAOI,GAAerB,KAAKd,KAAKM,MAAQ,IAAM,KAAMyB,EAAWA,sCAGnEd,OACNc,SACEK,EAAYnB,EAAME,OAAS,EAC3BkB,EAAkBD,EAAY,EAC9BE,EAAoBrB,EAAMgB,UAAUG,EAAYtB,KAAKd,KAAKS,OAAOU,OAAS,EAAGiB,EAAYtB,KAAKd,KAAKS,OAAOU,QAC1GoB,EAA0BtB,EAAMgB,UAAUI,EAAkBvB,KAAKd,KAAKS,OAAOU,OAAS,EAAGkB,EAAkBvB,KAAKd,KAAKS,OAAOU,eAE1HL,KAAKd,KAAKS,aACX6B,IACMrB,aAENsB,OACStB,EAAMgB,UAAU,EAAGI,GACXpB,EAAMgB,UAAUhB,EAAME,OAASL,KAAKd,KAAKS,OAAOU,OAAS,EAAGkB,EAAkBvB,KAAKd,KAAKS,OAAOU,4BAGvGF,EAAMgB,UAAU,EAAGG,cAI5BL,oDAIGjB,KAAKI,YAAcJ,KAAKd,KAAKK,iBAAmBS,KAAKI,UAAUJ,KAAKd,KAAKO,gDAG7EiC,UACCA,EAAS,GAAM,+BAGnBvB,OACGwB,EAAW3B,KAAKd,KAAKE,gBAAyC,IAAxBe,EAAMyB,QAAQ,KACtDX,MAAYjB,KAAK6B,gBAAgB1B,IAAUH,KAAK8B,oBAC3C9B,KAAK+B,iBAAiBd,EAAQjB,KAAKd,KAAKK,iBAAkB,SAC7Da,EAAYJ,KAAKI,mBAElBL,MAAMC,KAAKgC,gBAAgBf,EAAQb,QAC7BJ,KAAK+B,iBAAiBd,EAAQ,OAC9BjB,KAAKiC,aAAahB,GAAU,GAAIb,EAAWJ,KAAKd,KAAKO,kBACrDO,KAAKd,KAAKO,gBAAkBwB,EAAOZ,UAAYD,EAAYa,EAAWA,IACtEjB,KAAKkC,cAAcjB,IAG1BjB,KAAKd,KAAKQ,WACHM,KAAKmC,UAAUlB,IAEtBjB,KAAKd,KAAKS,WACHK,KAAKoC,UAAUnB,MAGfjB,KAAKd,KAAKI,mBAAqBqC,EAAW,IAAM,IAAKV,GAASjB,KAAKd,KAAKI,mBAAqBqC,EAAW,IAAM,yCAG9GxB,OACLC,EAAYJ,KAAKI,YACnBa,EAASjB,KAAK8B,sBACV9B,KAAK+B,iBAAiB5B,EAAMe,WAAYlB,KAAKd,KAAKK,iBAAkB,MAEvEQ,MAAMI,GAAQ,IACbH,KAAKqC,QAAQlC,GAAQ,KACjBuB,EAASvB,EAAMmC,MAAM,KACvB5B,EAAWgB,EAAO,GAClBa,EAAWb,EAAO,QAIVhB,KAFDV,KAAKiC,aAAaM,GAAY,GAAInC,EAAWJ,KAAKd,KAAKO,gBAAgB,WAIzEO,KAAKgC,gBAAgB7B,EAAOC,KAC5BJ,KAAKiC,aAAahB,GAAU,GAAIb,EAAWJ,KAAKd,KAAKO,eAAiBwB,EAAOZ,QAAQ,KAGvFL,KAAKkC,cAAcjB,KACnBjB,KAAKwC,iBAAiBvB,EAAQjB,KAAKd,KAAKK,yBAG/CS,KAAKd,KAAKQ,WACHM,KAAKmC,UAAUlB,IAEtBjB,KAAKd,KAAKS,WACHK,KAAKoC,UAAUnB,IAGnBA,qCAGEd,WACHsC,EAAsBtC,EAAMe,WAAWU,QAAQ5B,KAAKd,KAAKK,kBAC3DmD,GAAsB,EACtBzB,EAAS,GAEJH,EAAIX,EAAME,OAAS,EAAQ,GAALS,EAAQA,IACjC6B,SAASxC,EAAMW,MAASd,KAAKd,KAAKM,OAAsB,MAAbW,EAAMW,KAC1CX,EAAMW,GAAKG,GACc,IAAzBwB,GAA+BC,GAAuBvC,EAAMW,KAAOd,KAAKd,KAAKK,qBAC7EY,EAAMW,GAAGC,QAAQf,KAAKd,KAAKK,iBAAkB,KAAO0B,KACvC,SAKL,MAAdA,EAAO,OAAiBA,EAAWA,0CAG5Bd,EAAOC,WAAWE,6DAC1BsC,EAAc,kBAAMtC,EAAQ,EAAIH,EAAME,OAAS,GACjDwC,EAAWD,IAERzC,EAAM0C,KAAczC,KACjBD,EAAMgB,UAAU,EAAG0B,EAAW,GAAK1C,EAAMgB,UAAU0B,EAAW,EAAG1C,EAAME,UACpEuC,WAGNzC,uCAGIA,UAGO,IAFDA,EAAMyB,QAAQ5B,KAAKd,KAAKQ,OAAQ,OAGvCS,EAAMgB,UAAUnB,KAAKd,KAAKQ,OAAOW,OAAQF,EAAME,SAGlDF,uCAGIA,OACL0C,EAAW1C,EAAMyB,QAAQ5B,KAAKd,KAAKS,OAAQQ,EAAME,OAASL,KAAKd,KAAKS,OAAOU,YAE/D,IAAdwC,EAAiB,KACbvC,EAAQH,EAAMgB,UAAU,EAAG0B,KACzBvC,EAAQH,EAAMgB,UAAUb,EAAMD,OAASL,KAAKd,KAAKS,OAAOU,OAAS,EAAGF,EAAME,OAAS,UAGtFF,2CAGQA,EAAOkB,OAAWyB,yDAAW,UACrC3C,EAAMY,QAAQ,IAAIC,YAAYK,EAAa,KAAMyB,wCAG7C3C,OACPc,EAASd,EAAMe,WACfd,EAAYJ,KAAKI,mBAEjBJ,KAAKd,KAAKQ,WACHM,KAAK+C,aAAa9B,IAGzBjB,KAAKd,KAAKS,WACHK,KAAKgD,aAAa/B,OAGpBjB,KAAKiD,WAAWhC,QAGdjB,KAAKgC,gBAAgBf,EAAQb,KAC7BJ,KAAKwC,iBAAiBvB,EAAQ,MAGlCA,IAAWjB,KAAKd,KAAKM,MAAQ,IAAM,4CAG5BW,OACVc,EAASd,EAAMe,WACfd,EAAYJ,KAAKI,mBAEjBJ,KAAKd,KAAKQ,WACHM,KAAK+C,aAAa9B,IAGzBjB,KAAKd,KAAKS,WACHK,KAAKkD,YAAYjC,KACjBjB,KAAKgD,aAAa/B,OAGpBjB,KAAKiD,WAAWhC,QAGdjB,KAAKmD,kBAAkBlC,KAEvBjB,KAAKgC,gBAAgBf,EAAQb,KAE7BJ,KAAKwC,iBAAiBvB,EAAQ,MAGlCA,IAAWjB,KAAKd,KAAKM,MAAQ,IAAM,eC/P7B,2BACE4D,OACXP,GAAY,KACZ,mBAAoBO,IACXA,EAAMC,oBACZ,GAAIC,SAASC,UAAW,GACvBC,YACAC,EAAQH,SAASC,UAAUG,cAC3BrD,EAASiD,SAASC,UAAUG,cAAcC,KAAKtD,SAC/CuD,UAAU,aAAcR,EAAMjD,MAAME,UAC/BoD,EAAME,KAAKtD,OAASA,SAE1BwC,6BAGQO,EAAOS,MAClBT,EAAMU,oBACFN,UACAM,kBAAkBD,EAAOA,QAC1B,GAAIT,EAAMW,gBAAiB,KAC1BN,EAAQL,EAAMW,oBACdC,UAAS,KACTC,QAAQ,YAAaJ,KACrBD,UAAU,YAAaC,KACvBK,8BAIAC,EAAUC,EAAUP,WACpB,QACDO,EAAS/D,OAAS8D,EAAS9D,cACvBwD,EAAQ,OACZO,EAAS/D,OAAS8D,EAAS9D,cACvBwD,EAAQ,iBAERA,6BAIGT,EAAOiB,gBACfC,SAAW,kBAENC,UACFC,eAAepB,EAAMkB,SAAUC,EAAG,KAClC,kBAAMF,EAAKnF,KAAKqF,QAChB,SAACpE,KACCjB,KAAKqF,GAAKpE,IACVsE,YAAYrB,WALlB,IAAMmB,KAAKF,EAAKnF,OAAVqF,qBAWLnB,EAAOiB,gBACPK,iBAAiB,QAAS,gBACxBN,EAAWhB,EAAMjD,QAClBjB,KAAKG,aAAa+E,OACjBD,EAAWE,EAAKM,KAAKP,GACrBQ,EAAmBC,EAAKC,iBAAiB1B,GAC3C2B,EAAmBF,EAAKG,UAAUb,EAAUC,EAAUQ,GAE5B,UAA1BxB,EAAMkB,SAASzE,SACE,EACgB,QAA1BuD,EAAMkB,SAASzE,WACLsE,EAAS9D,UAGxBF,MAAQgE,IACRc,OAASd,IAEVe,iBAAiB9B,EAAO2B,KACxB7F,KAAKC,YAAYgF,KACpBgB,aAAaC,QAAUP,EAAKJ,YAAYrB,2BAIlCA,KACJiC,cAAc,IAAID,MAAM,6cCzElC,IAAIE,EAAQ,IAAIpF,+LAWUC,EAAOjB,OACvBmF,EAAO,IAAIkB,OAAqB,IAATrG,GAAwC,qBAATA,gBAAAA,IAAoBA,EAAOoG,KAClFpG,KAAKG,aAAac,OAEjBwB,EAAW0C,EAAKnF,KAAKE,gBAAyC,IAAxBe,EAAMyB,QAAQ,KACpD4D,EAAcnB,EAAKoB,aAAapB,EAAKqB,aAAavF,IAClDc,IAAaoD,EAAKnF,KAAKI,mBAAqBqC,EAAW,IAAK,IAAK6D,GAAcnB,EAAKnF,KAAKI,mBAAqBqC,EAAW,IAAK,aAE/HzC,KAAKC,YAAY8B,GAEfA,uCAGWmC,EAAOlE,OACnBmF,EAAO,IAAIkB,OAAqB,IAATrG,GAAwC,qBAATA,gBAAAA,IAAoBA,EAAOoG,GACjFnF,EAAQiD,EAAMlC,aACfhC,KAAKG,aAAac,OAEjBc,EAASoD,EAAKM,KAAKxE,YAEpBjB,KAAKC,YAAY8B,GAEfA,yCAGamC,EAAOlE,OACrBmF,EAAO,IAAIkB,OAAqB,IAATrG,GAAwC,qBAATA,gBAAAA,IAAoBA,EAAOoG,GACnFnF,EAAQiD,EAAMlC,aACbhC,KAAKG,aAAac,OACnBc,EAAS,IAEPU,EAAW0C,EAAKnF,KAAKE,gBAAyC,IAAxBe,EAAMyB,QAAQ,YAEtDD,MACMxB,EAAMY,QAAQ,IAAK,OAGrBsD,EAAKqB,aAAavF,GAErBH,KAAKd,KAAKM,UACLW,EAAMY,QAAQ,IAAIC,OAAO,IAAK,KAAM,KAGzCjB,MAAMI,OACAwF,WAAWhE,GAAoB,EAATxB,EAAaA,MAGzCjB,KAAKC,YAAY8B,GAEfA,kCAGM2E,EAAS1G,MACE,oBAAboE,SAA0B,KAAM,8CAErCF,EAA0B,iBAAXwC,EAAsBtC,SAASuC,cAAcD,GAAWA,EACvEvB,EAAO,IAAIkB,OAAqB,IAATrG,GAAwC,qBAATA,gBAAAA,IAAoBA,EAAOoG,YAE7EQ,gBAAgB1C,EAAOiB,KACvB0B,QAAQ3C,EAAOiB,KACfI,YAAYrB,KAEhB4C,eAAiB,kBAAMC,EAAgBD,eAAe5C,EAAMjD,MAAOiD,EAAMkB,WAExElB,sCAvEAkC,gBAGOnF,KACN,IAAID,EAAKC"}