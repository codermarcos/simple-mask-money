{"version":3,"file":"simple-mask-money.js","sources":["../src/args.js","../src/core.js","../src/implanter.js","../src/index.js"],"sourcesContent":["module.exports = class Args {\n  constructor(args) {\n    this.decimalSeparator    = ',';\n    this.fixed               = true;\n    this.fractionDigits      = 2;\n    this.prefix              = '';\n    this.suffix              = '';\n    this.thousandsSeparator  = '.';\n\n    // After adding number, move the\n    // cursor to start|end|move.\n    this.cursor              = 'move';\n\n    this.merge(args);\n  }\n\n  merge(args) {\n    if (!args || typeof args !== 'object') return;\n\n    this.fixed               = typeof args.fixed === 'boolean' ? args.fixed : this.fixed;\n\n    this.decimalSeparator    = args.decimalSeparator    || this.decimalSeparator;\n    this.fractionDigits      = args.fractionDigits      || this.fractionDigits;\n    this.prefix              = args.prefix              || args.preffix || this.prefix;\n    this.suffix              = args.suffix              || this.suffix;\n    this.thousandsSeparator  = args.thousandsSeparator  || this.thousandsSeparator;\n    this.cursor              = args.cursor              || this.cursor;\n  }\n};\n","const Args = require('./args');\r\nmodule.exports = class Core {\r\n  constructor(args) {\r\n    this.args = new Args(args);\r\n  }\r\n\r\n  completer(size = 1) {\r\n    return this.args.fixed ? ''.padEnd(size, '0') : ''.padEnd(size, '_');\r\n  }\r\n\r\n  emptyOrInvalid() {\r\n    return `${this.completer()}${this.args.decimalSeparator}${this.completer(2)}`;\r\n  }\r\n\r\n  onlyNumber(value) {\r\n    let retorno = '';\r\n\r\n    for (let i = 0; i < value.length; i++) {\r\n      if (isFinite(value[i])) retorno += value[i];\r\n    }\r\n\r\n    return retorno;\r\n  }\r\n\r\n  addingPrefix(value) {\r\n    return `${this.args.prefix}${value}`;\r\n  }\r\n\r\n  removingPrefix(value) {\r\n    return value.replace(this.args.prefix, '');\r\n  }\r\n\r\n  addingSuffix(value) {\r\n    return `${value}${this.args.suffix}`;\r\n  }\r\n\r\n  removingSuffix(value) {\r\n    if (value.includes(this.args.suffix, value.length - this.args.fractionDigits)) {\r\n      value = value.replace(this.args.suffix, '');\r\n    } else {\r\n      value = value.substring(0, value.length - 1);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  addingCompleterFromStart(value, completer) {\r\n    while (value.length < this.args.fractionDigits) {\r\n      value = `${completer}${value}`;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  addingCompleterFromEnd(value, completer) {\r\n    while (value.length < this.args.fractionDigits) {\r\n      value = `${value}${completer}`;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  removingCompleterFromStart(value, completer) {\r\n    while (value[0] === completer) {\r\n      value = value.replace(completer, '');\r\n    }\r\n    return value;\r\n  }\r\n\r\n  removingCompleterFromEnd(value, completer) {\r\n    while (value[value.length - 1] === completer) {\r\n      value = value.substring(0, value.length - 1);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  addingAutoComplete(value) {\r\n    const n = `${value}${this.addingCompleterFromEnd('', '0')}`;\r\n    return n;\r\n  }\r\n\r\n  autoComplete(value) {\r\n    const regexp = new RegExp(`\\\\${this.args.decimalSeparator}`, 'g');\r\n    const array = value.match(regexp) || [];\r\n    if (array.length > 1) {\r\n      value = this.addingAutoComplete(value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  addingDecimalSeparator(value, completer, separator) {\r\n    let length = value.length - this.args.fractionDigits;\r\n\r\n    let regexpFraction;\r\n    let decimals = '$1';\r\n    let dezenas = completer;\r\n    let character = isFinite(completer) ? 'd' : 'w';\r\n\r\n    regexpFraction = `(\\\\${character}{${this.args.fractionDigits}})`;\r\n\r\n    if (length > 0) {\r\n      regexpFraction = `(\\\\${character}{${length}})${regexpFraction}`;\r\n      dezenas = decimals;\r\n      decimals = '$2';\r\n    }\r\n\r\n    return value.replace(\r\n      new RegExp(regexpFraction),\r\n      `${dezenas}${separator}${decimals}`\r\n    );\r\n  }\r\n\r\n  addingHundredsSeparator(value) {\r\n    let size = value.length - this.args.fractionDigits;\r\n    let hundreds = Math.ceil(size / 3);\r\n    let regexpHundreds = '(\\\\d)';\r\n\r\n    let replacement = `${this.args.decimalSeparator}$${hundreds + 1}`;\r\n\r\n    for (let i = hundreds; i !== 0; i--) {\r\n      if (size >= 3) {\r\n        regexpHundreds = `(\\\\d{3})${regexpHundreds}`;\r\n        size -= 3;\r\n      } else {\r\n        regexpHundreds = `(\\\\d{${size}})${regexpHundreds}`;\r\n      }\r\n\r\n      if (i > 1) {\r\n        replacement = `${this.args.thousandsSeparator}$${i}${replacement}`;\r\n      } else {\r\n        replacement = `$${i}${replacement}`;\r\n      }\r\n    }\r\n\r\n    return value.replace(new RegExp(regexpHundreds), replacement);\r\n  }\r\n\r\n  removeSeparator(value, separator) {\r\n    return value.replace(new RegExp(`\\\\${separator}`, 'g'), '');\r\n  }\r\n\r\n  formatDecimal(value, completer, separator) {\r\n    value = this.addingCompleterFromStart(value, completer);\r\n    value = this.addingDecimalSeparator(value, completer, separator);\r\n    return value;\r\n  }\r\n\r\n  textToNumber(input) {\r\n    let retorno = input.toString();\r\n    let completer = this.completer();\r\n\r\n    if (this.args.prefix) {\r\n      retorno = this.removingPrefix(retorno);\r\n    }\r\n\r\n    if (this.args.suffix) {\r\n      retorno = this.removingSuffix(retorno);\r\n    }\r\n\r\n    retorno = this.removeSeparator(retorno, this.args.thousandsSeparator);\r\n    retorno = this.removeSeparator(retorno, this.args.decimalSeparator);\r\n\r\n    retorno = this.onlyNumber(retorno);\r\n\r\n    retorno = this.removingCompleterFromStart(\r\n      retorno,\r\n      completer\r\n    );\r\n\r\n    return retorno || (this.args.fixed ? '0' : '');\r\n  }\r\n\r\n  numberToText(input) {\r\n    let retorno = this.emptyOrInvalid();\r\n\r\n    if (parseFloat(input) !== 'NaN') {\r\n      if (input.length <= this.args.fractionDigits) {\r\n        retorno = this.formatDecimal(\r\n          input,\r\n          this.completer(),\r\n          this.args.decimalSeparator\r\n        );\r\n      } else {\r\n        retorno = this.addingHundredsSeparator(input);\r\n      }\r\n    }\r\n\r\n    if (this.args.prefix) {\r\n      retorno = this.addingPrefix(retorno);\r\n    }\r\n    if (this.args.suffix) {\r\n      retorno = this.addingSuffix(retorno);\r\n    }\r\n\r\n    return retorno;\r\n  }\r\n};\r\n","module.exports = {\n  getCaretPosition(input) {\n    let position = -1;\n    if ('selectionStart' in input) {\n      position = input.selectionStart;\n    } else if (document.selection) {\n      input.focus();\n      const range = document.selection.createRange();\n      const length = document.selection.createRange().text.length;\n      range.moveStart('character', -input.value.length);\n      position = range.text.length - length;\n    }\n    return position;\n  },\n\n  setCaretPosition(input, index) {\n    if (input.setSelectionRange) {\n      input.focus();\n      input.setSelectionRange(index, index);\n    } else if (input.createTextRange) {\n      const range = input.createTextRange();\n      range.collapse(true);\n      range.moveEnd('character', index);\n      range.moveStart('character', index);\n      range.select();\n    }\n  },\n\n  indexMove(newValue, oldValue) {\n    let move;\n    switch (true) {\n      case oldValue.length < newValue.length:\n        move = - 1;\n        break;\n      case oldValue.length > newValue.length:\n        move = 1;\n        break;\n      default:\n        move = 0;\n        break;\n    }\n    return move;\n  }\n};\n","const Args = require('./args');\r\nconst Core = require('./core');\r\nconst implanter = require('./implanter');\r\n\r\nlet _args = new Args();\r\nlet _core = new Core(_args);\r\n\r\nmodule.exports = class SimpleMaskMoney {\r\n  constructor() {\r\n    _args = new Args();\r\n    _core = new Core(_args);\r\n    Object.defineProperty(this, 'args', {\r\n      get() {\r\n        return _args;\r\n      },\r\n      set(value) {\r\n        _args = new Args(value);\r\n        _core = new Core(_args);\r\n      }\r\n    });\r\n    this.formatToNumber = SimpleMaskMoney.formatToNumber;\r\n    this.format = SimpleMaskMoney.format;\r\n    this.setMask = SimpleMaskMoney.setMask;\r\n  }\r\n\r\n  static get args() {\r\n    return _args;\r\n  }\r\n\r\n  static set args(value) {\r\n    _args = new Args(value);\r\n    _core = new Core(_args);\r\n  }\r\n\r\n  static format(value) {\r\n    return _core.numberToText(_core.textToNumber(value));\r\n  }\r\n\r\n  static formatToNumber(input) {\r\n    let retorno = '0';\r\n    let value = _core.textToNumber(input);\r\n\r\n    if (parseFloat(value) !== 'NaN') {\r\n      if (value.length <= _args.fractionDigits) {\r\n        value = _core.formatDecimal(value, '0', '.');\r\n      } else {\r\n        let lengthWithoutDecimals = value.length - _args.fractionDigits;\r\n        value = value.replace(\r\n          new RegExp(\r\n            `(\\\\d{${lengthWithoutDecimals}})(\\\\d{${_args.fractionDigits}})`\r\n          ),\r\n          '$1.$2'\r\n        );\r\n      }\r\n\r\n      retorno = value;\r\n    }\r\n\r\n    return parseFloat(retorno);\r\n  }\r\n\r\n  static setMask(element, args) {\r\n    if (typeof document === 'undefined') throw 'This function only works on client side';\r\n\r\n    const input = typeof element == 'string' ? document.querySelector(element) : element;\r\n\r\n    if (args) {\r\n      SimpleMaskMoney.args = args;\r\n    }\r\n\r\n    input.addEventListener('input', e => {\r\n      const oldValue = input.value;\r\n      const newValue = SimpleMaskMoney.format(oldValue);\r\n      const caretPosition = implanter.getCaretPosition(input);\r\n      const move = implanter.indexMove(newValue, oldValue);\r\n      let newCaretPosition = caretPosition - move;\r\n      const {cursor} = SimpleMaskMoney.args;\r\n\r\n      if (cursor === 'start') {\r\n        newCaretPosition = 0;\r\n      } else if (cursor === 'end') {\r\n        newCaretPosition = newValue.length;\r\n      }\r\n\r\n      input.value = newValue;\r\n      input._value = newValue;\r\n\r\n      implanter.setCaretPosition(input, newCaretPosition);\r\n\r\n      !(e instanceof Event) && input.dispatchEvent(new Event('input'));\r\n    });\r\n\r\n    input['formatToNumber'] = () => SimpleMaskMoney.formatToNumber(input.value);\r\n\r\n    return input;\r\n  }\r\n};\r\n"],"names":["module","args","decimalSeparator","fixed","fractionDigits","prefix","suffix","thousandsSeparator","cursor","merge","this","preffix","Args","size","padEnd","completer","value","retorno","i","length","isFinite","replace","includes","substring","addingCompleterFromEnd","regexp","RegExp","match","addingAutoComplete","separator","regexpFraction","decimals","dezenas","character","hundreds","Math","ceil","regexpHundreds","replacement","addingCompleterFromStart","addingDecimalSeparator","input","toString","removingPrefix","removingSuffix","removeSeparator","onlyNumber","removingCompleterFromStart","emptyOrInvalid","parseFloat","formatDecimal","addingHundredsSeparator","addingPrefix","addingSuffix","position","selectionStart","document","selection","focus","range","createRange","text","moveStart","index","setSelectionRange","createTextRange","collapse","moveEnd","select","newValue","oldValue","move","_args","_core","Core","defineProperty","formatToNumber","SimpleMaskMoney","format","setMask","numberToText","textToNumber","lengthWithoutDecimals","element","querySelector","addEventListener","newCaretPosition","implanter","_value","e","Event","dispatchEvent"],"mappings":"goBAAAA,4BACcC,8GACLC,iBAAsB,SACtBC,OAAsB,OACtBC,eAAsB,OACtBC,OAAsB,QACtBC,OAAsB,QACtBC,mBAAsB,SAItBC,OAAsB,YAEtBC,MAAMR,2CAGPA,GACCA,GAAwB,qBAATA,gBAAAA,WAEfE,MAA4C,kBAAfF,EAAKE,MAAsBF,EAAKE,MAAQO,KAAKP,WAE1ED,iBAAsBD,EAAKC,kBAAuBQ,KAAKR,sBACvDE,eAAsBH,EAAKG,gBAAuBM,KAAKN,oBACvDC,OAAsBJ,EAAKI,QAAuBJ,EAAKU,SAAWD,KAAKL,YACvEC,OAAsBL,EAAKK,QAAuBI,KAAKJ,YACvDC,mBAAsBN,EAAKM,oBAAuBG,KAAKH,wBACvDC,OAAsBP,EAAKO,QAAuBE,KAAKF,sQCzBhER,4BACcC,8GACLA,KAAO,IAAIW,EAAKX,qDAGbY,yDAAO,SACRH,KAAKT,KAAKE,MAAQ,GAAGW,OAAOD,EAAM,KAAO,GAAGC,OAAOD,EAAM,uDAItDH,KAAKK,YAAcL,KAAKT,KAAKC,iBAAmBQ,KAAKK,UAAU,sCAGhEC,WACLC,EAAU,GAELC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAC5BE,SAASJ,EAAME,MAAKD,GAAWD,EAAME,WAGpCD,uCAGID,YACDN,KAAKT,KAAKI,OAASW,yCAGhBA,UACNA,EAAMK,QAAQX,KAAKT,KAAKI,OAAQ,yCAG5BW,YACDA,EAAQN,KAAKT,KAAKK,8CAGfU,YACTA,EAAMM,SAASZ,KAAKT,KAAKK,OAAQU,EAAMG,OAAST,KAAKT,KAAKG,gBACpDY,EAAMK,QAAQX,KAAKT,KAAKK,OAAQ,IAEhCU,EAAMO,UAAU,EAAGP,EAAMG,OAAS,oDAKrBH,EAAOD,QACvBC,EAAMG,OAAST,KAAKT,KAAKG,qBACnBW,EAAYC,SAElBA,iDAGcA,EAAOD,QACrBC,EAAMG,OAAST,KAAKT,KAAKG,qBACnBY,EAAQD,SAEdC,qDAGkBA,EAAOD,QACzBC,EAAM,KAAOD,KACVC,EAAMK,QAAQN,EAAW,WAE5BC,mDAGgBA,EAAOD,QACvBC,EAAMA,EAAMG,OAAS,KAAOJ,KACzBC,EAAMO,UAAU,EAAGP,EAAMG,OAAS,UAErCH,6CAGUA,YACJA,EAAQN,KAAKc,uBAAuB,GAAI,0CAI1CR,OACLS,EAAS,IAAIC,YAAYhB,KAAKT,KAAKC,iBAAoB,YAE1C,GADLc,EAAMW,MAAMF,IAAW,IAC3BN,WACAT,KAAKkB,mBAAmBZ,IAE3BA,iDAGcA,EAAOD,EAAWc,OACnCV,EAASH,EAAMG,OAAST,KAAKT,KAAKG,eAElC0B,SACAC,EAAW,KACXC,EAAUjB,EACVkB,EAAYb,SAASL,GAAa,IAAM,mBAErBkB,MAAavB,KAAKT,KAAKG,oBAEjC,EAATe,YACqBc,MAAad,OAAWW,IACrCC,IACC,MAGNf,EAAMK,QACX,IAAIK,OAAOI,MACRE,EAAUH,EAAYE,mDAILf,WAClBH,EAAOG,EAAMG,OAAST,KAAKT,KAAKG,eAChC8B,EAAWC,KAAKC,KAAKvB,EAAO,GAC5BwB,EAAiB,QAEjBC,EAAiB5B,KAAKT,KAAKC,sBAAoBgC,EAAW,GAErDhB,EAAIgB,EAAgB,IAANhB,EAASA,IAClB,GAARL,gBAC0BwB,KACpB,aAEiBxB,OAASwB,IAG5B,EAAJnB,EACeR,KAAKT,KAAKM,uBAAsBW,EAAIoB,MAEnCpB,EAAIoB,SAInBtB,EAAMK,QAAQ,IAAIK,OAAOW,GAAiBC,2CAGnCtB,EAAOa,UACdb,EAAMK,QAAQ,IAAIK,YAAYG,EAAa,KAAM,0CAG5Cb,EAAOD,EAAWc,YACtBnB,KAAK6B,yBAAyBvB,EAAOD,KACrCL,KAAK8B,uBAAuBxB,EAAOD,EAAWc,wCAI3CY,OACPxB,EAAUwB,EAAMC,WAChB3B,EAAYL,KAAKK,mBAEjBL,KAAKT,KAAKI,WACFK,KAAKiC,eAAe1B,IAG5BP,KAAKT,KAAKK,WACFI,KAAKkC,eAAe3B,MAGtBP,KAAKmC,gBAAgB5B,EAASP,KAAKT,KAAKM,sBACxCG,KAAKmC,gBAAgB5B,EAASP,KAAKT,KAAKC,oBAExCQ,KAAKoC,WAAW7B,MAEhBP,KAAKqC,2BACb9B,EACAF,MAGiBL,KAAKT,KAAKE,MAAQ,IAAM,yCAGhCsC,OACPxB,EAAUP,KAAKsC,uBAEO,QAAtBC,WAAWR,OACTA,EAAMtB,QAAUT,KAAKT,KAAKG,eAClBM,KAAKwC,cACbT,EACA/B,KAAKK,YACLL,KAAKT,KAAKC,kBAGFQ,KAAKyC,wBAAwBV,IAIvC/B,KAAKT,KAAKI,WACFK,KAAK0C,aAAanC,IAE1BP,KAAKT,KAAKK,WACFI,KAAK2C,aAAapC,IAGvBA,sBC9LQwB,OACXa,GAAY,KACZ,mBAAoBb,IACXA,EAAMc,oBACZ,GAAIC,SAASC,UAAW,GACvBC,YACAC,EAAQH,SAASC,UAAUG,cAC3BzC,EAASqC,SAASC,UAAUG,cAAcC,KAAK1C,SAC/C2C,UAAU,aAAcrB,EAAMzB,MAAMG,UAC/BwC,EAAME,KAAK1C,OAASA,SAE1BmC,cAGQb,EAAOsB,MAClBtB,EAAMuB,oBACFN,UACAM,kBAAkBD,EAAOA,QAC1B,GAAItB,EAAMwB,gBAAiB,KAC1BN,EAAQlB,EAAMwB,oBACdC,UAAS,KACTC,QAAQ,YAAaJ,KACrBD,UAAU,YAAaC,KACvBK,sBAIAC,EAAUC,OACdC,iBACI,QACDD,EAASnD,OAASkD,EAASlD,UACrB,aAENmD,EAASnD,OAASkD,EAASlD,SACvB,kBAGA,SAGJoD,wPCrCX,IAAIC,EAAQ,IAAI5D,EACZ6D,EAAQ,IAAIC,EAAKF,0IAIT,IAAI5D,IACJ,IAAI8D,EAAKF,UACVG,eAAejE,KAAM,OAAQ,uBAEzB8D,gBAELxD,KACM,IAAIJ,EAAKI,KACT,IAAI0D,EAAKF,WAGhBI,eAAiBC,EAAgBD,oBACjCE,OAASD,EAAgBC,YACzBC,QAAUF,EAAgBE,sDAYnB/D,UACLyD,EAAMO,aAAaP,EAAMQ,aAAajE,2CAGzByB,OAChBxB,EAAU,IACVD,EAAQyD,EAAMQ,aAAaxC,MAEL,QAAtBQ,WAAWjC,GAAkB,IAC3BA,EAAMG,QAAUqD,EAAMpE,iBAChBqE,EAAMvB,cAAclC,EAAO,IAAK,SACnC,KACDkE,EAAwBlE,EAAMG,OAASqD,EAAMpE,iBACzCY,EAAMK,QACZ,IAAIK,eACMwD,YAA+BV,EAAMpE,qBAE/C,WAIMY,SAGLiC,WAAWhC,mCAGLkE,EAASlF,MACE,oBAAbuD,SAA0B,KAAM,8CAErCf,EAA0B,iBAAX0C,EAAsB3B,SAAS4B,cAAcD,GAAWA,SAEzElF,MACcA,KAAOA,KAGnBoF,iBAAiB,QAAS,gBACxBf,EAAW7B,EAAMzB,MACjBqD,EAAWQ,EAAgBC,OAAOR,GAGpCgB,EAFkBC,EAA2B9C,GACpC8C,EAAoBlB,EAAUC,GAEpC9D,EAAUqE,EAAgB5E,KAA1BO,OAEQ,UAAXA,IACiB,EACC,QAAXA,MACU6D,EAASlD,UAGxBH,MAAQqD,IACRmB,OAASnB,IAEY5B,EAAO6C,KAEhCG,aAAaC,QAAUjD,EAAMkD,cAAc,IAAID,MAAM,cAGzD,eAA0B,kBAAMb,EAAgBD,eAAenC,EAAMzB,QAE9DyB,sCApEA+B,gBAGOxD,KACN,IAAIJ,EAAKI,KACT,IAAI0D,EAAKF"}