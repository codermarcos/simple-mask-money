{"version":3,"file":"simple-mask-money.js","sources":["../src/args.js","../src/core.js","../src/implanter.js","../src/index.js"],"sourcesContent":["module.exports = class Args {\n  constructor(args) {\n    this.allowNegative       = false;    \n    this.negativeSignAfter   = false;\n    this.decimalSeparator    = ',';\n    this.fixed               = true;\n    this.fractionDigits      = 2;\n    this.prefix              = '';\n    this.suffix              = '';\n    this.thousandsSeparator  = '.';\n    this.merge(args);\n  }\n\n  merge(args) {    \n    if (!args || typeof args !== 'object') return;\n\n    this.fixed               = typeof args.fixed === 'boolean' ? args.fixed : this.fixed;\n    this.allowNegative       = typeof args.allowNegative === 'boolean' ? args.allowNegative : this.allowNegative;    \n    this.negativeSignAfter   = typeof args.negativeSignAfter === 'boolean' ? args.negativeSignAfter : this.negativeSignAfter;\n\n    this.decimalSeparator    = args.decimalSeparator    || this.decimalSeparator;\n    this.fractionDigits      = args.fractionDigits      || this.fractionDigits;\n    this.prefix              = args.prefix              || args.preffix || this.prefix;\n    this.suffix              = args.suffix              || this.suffix;\n    this.thousandsSeparator  = args.thousandsSeparator  || this.thousandsSeparator;\n  }\n};\n","const Args = require('./args');\nmodule.exports = class Core {\n  constructor(args) {\n    this.args = new Args(args);\n  }\n\n  completer(size = 1) {\n    return this.args.fixed ? ''.padEnd(size, '0') : ''.padEnd(size, '_');\n  }\n\n  emptyOrInvalid() {\n    return `${this.completer()}${this.args.decimalSeparator}${this.completer(this.args.fractionDigits)}`;\n  }\n\n  onlyNumber(value) {\n    let retorno = '';\n\n    for (let i = 0; i < value.length; i++) {\n      if (isFinite(value[i])) retorno += value[i];\n    }\n\n    return retorno;\n  }\n\n  addingPrefix(value) {\n    return `${this.args.prefix}${value}`;\n  }\n\n  removingPrefix(value) {\n    return value.replace(this.args.prefix, '');\n  }\n\n  addingSuffix(value) {\n    return `${value}${this.args.suffix}`;\n  }\n\n  removingSuffix(value) {\n    if (value.includes(this.args.suffix, value.length - this.args.fractionDigits)) {\n      value = value.replace(this.args.suffix, '');\n    } else {\n      value = value.substring(0, value.length - 1);\n    }\n    return value;\n  }\n\n  addingCompleterFromStart(value, completer) {\n    while (value.length < this.args.fractionDigits) {\n      value = `${completer}${value}`;\n    }\n    return value;\n  }\n\n  addingCompleterFromEnd(value, completer) {\n    while (value.length < this.args.fractionDigits) {\n      value = `${value}${completer}`;\n    }\n    return value;\n  }\n\n  removingCompleterFromStart(value, completer) {\n    while (value[0] === completer) {\n      value = value.replace(completer, '');\n    }\n    return value;\n  }\n\n  removingCompleterFromEnd(value, completer) {\n    while (value[value.length - 1] === completer) {\n      value = value.substring(0, value.length - 1);\n    }\n    return value;\n  }\n\n  addingAutoComplete(value) {\n    const n = `${value}${this.addingCompleterFromEnd('', '0')}`;\n    return n;\n  }\n\n  autoComplete(value) {\n    const regexp = new RegExp(`\\\\${this.args.decimalSeparator}`, 'g');\n    const array = value.match(regexp) || [];\n    if (array.length > 1) {\n      value = this.addingAutoComplete(value);\n    }\n    return value;\n  }\n\n  addingDecimalSeparator(value, completer, separator) {\n    let length = value.length - this.args.fractionDigits;\n\n    let regexpFraction;\n    let decimals = '$1';\n    let dezenas = completer;\n    let character = isFinite(completer) ? 'd' : 'w';\n\n    regexpFraction = `(\\\\${character}{${this.args.fractionDigits}})`;\n\n    if (length > 0) {\n      regexpFraction = `(\\\\${character}{${length}})${regexpFraction}`;\n      dezenas = decimals;\n      decimals = '$2';\n    }\n\n    return value.replace(\n      new RegExp(regexpFraction),\n      `${dezenas}${separator}${decimals}`\n    );\n  }\n\n  addingHundredsSeparator(value) {\n    let size = value.length - this.args.fractionDigits;\n    let hundreds = Math.ceil(size / 3);\n    let regexpHundreds = '(\\\\d)';\n\n    let replacement = `${this.args.decimalSeparator}$${hundreds + 1}`;\n\n    for (let i = hundreds; i !== 0; i--) {\n      if (size >= 3) {\n        regexpHundreds = `(\\\\d{3})${regexpHundreds}`;\n        size -= 3;\n      } else {\n        regexpHundreds = `(\\\\d{${size}})${regexpHundreds}`;\n      }\n\n      if (i > 1) {\n        replacement = `${this.args.thousandsSeparator}$${i}${replacement}`;\n      } else {\n        replacement = `$${i}${replacement}`;\n      }\n    }\n\n    return value.replace(new RegExp(regexpHundreds), replacement);\n  }\n\n  removeSeparator(value, separator) {\n    return value.replace(new RegExp(`\\\\${separator}`, 'g'), '');\n  }\n\n  formatDecimal(value, completer, separator) {\n    value = this.addingCompleterFromStart(value, completer);\n    value = this.addingDecimalSeparator(value, completer, separator);\n    return value;\n  }\n\n  textToNumber(input) {\n    let retorno = input.toString();\n    let completer = this.completer();\n\n    if (this.args.prefix) {\n      retorno = this.removingPrefix(retorno);\n    }\n\n    if (this.args.suffix) {\n      retorno = this.removingSuffix(retorno);\n    }\n\n    retorno = this.removeSeparator(retorno, this.args.thousandsSeparator);\n    retorno = this.removeSeparator(retorno, this.args.decimalSeparator);\n\n    retorno = this.onlyNumber(retorno);\n\n    retorno = this.removingCompleterFromStart(\n      retorno,\n      completer\n    );\n\n    return retorno || (this.args.fixed ? '0' : '');\n  }\n\n  numberToText(input) {\n    let retorno = this.emptyOrInvalid();\n\n    if (!isNaN(parseFloat(input))) {\n      if (input.length <= this.args.fractionDigits) {\n        retorno = this.formatDecimal(\n          input,\n          this.completer(),\n          this.args.decimalSeparator\n        );\n      } else {\n        retorno = this.addingHundredsSeparator(input);\n      }\n    }\n\n    if (this.args.prefix) {\n      retorno = this.addingPrefix(retorno);\n    }\n    if (this.args.suffix) {\n      retorno = this.addingSuffix(retorno);\n    }\n\n    return retorno;\n  }\n};\n","module.exports = {\n  getCaretPosition(input) {\n    let position = -1;\n    if ('selectionStart' in input) {\n      position = input.selectionStart;\n    } else if (document.selection) {\n      input.focus();\n      const range = document.selection.createRange();\n      const length = document.selection.createRange().text.length;\n      range.moveStart('character', -input.value.length);\n      position = range.text.length - length;\n    }\n    return position;\n  },\n  setCaretPosition(input, index) {\n    if (input.setSelectionRange) {\n      input.focus();\n      input.setSelectionRange(index, index);\n    } else if (input.createTextRange) {\n      const range = input.createTextRange();\n      range.collapse(true);\n      range.moveEnd('character', index);\n      range.moveStart('character', index);\n      range.select();\n    }\n  },\n  indexMove(newValue, oldValue) {\n    let move;\n    switch (true) {\n      case oldValue.length < newValue.length:\n        move = - 1;\n        break;\n      case oldValue.length > newValue.length:\n        move = 1;\n        break;\n      default:\n        move = 0;\n        break;\n    }\n    return move;\n  }\n};\n","const Args = require('./args');\nconst Core = require('./core');\nconst implanter = require('./implanter');\n\nlet _args = new Args();\nlet _core = new Core(_args);\n\nmodule.exports = class SimpleMaskMoney {\n\n  constructor() {\n    _args = new Args();\n    _core = new Core(_args);\n    Object.defineProperty(this, 'args', {\n      get() {\n        return _args;\n      },\n      set(value) {\n        _args = new Args(value);\n        _core = new Core(_args);\n      }\n    });\n    this.formatToNumber = SimpleMaskMoney.formatToNumber;\n    this.format = SimpleMaskMoney.format;\n    this.setMask = SimpleMaskMoney.setMask;\n  }\n\n  static get args() {\n    return _args;\n  }\n\n  static set args(value) {\n    _args = new Args(value);\n    _core = new Core(_args);\n  }\n\n  static format(value) {\n    const negative = _args.allowNegative && value.indexOf('-') !== -1;  \n    const formatation = _core.numberToText(_core.textToNumber(value));\n\n    return `${!_args.negativeSignAfter && negative ? '-': ''}${formatation}${_args.negativeSignAfter && negative ? '-': ''}`;\n  }\n\n  static formatToNumber(input) {\n    let retorno = '0';\n    let value = _core.textToNumber(input);\n    const negative = _args.allowNegative && input.indexOf('-') !== -1;   \n    \n    if (negative) {\n      value.replace('-', '');\n    }\n\n    if (!isNaN(parseFloat(value))) {\n      if (value.length <= _args.fractionDigits) {\n        value = _core.formatDecimal(value, '0', '.');\n      } else {\n        let lengthWithoutDecimals = value.length - _args.fractionDigits;\n        value = value.replace(\n          new RegExp(\n            `(\\\\d{${lengthWithoutDecimals}})(\\\\d{${_args.fractionDigits}})`\n          ),\n          '$1.$2'\n        );\n      }\n\n      retorno = value;\n    }\n      \n    return parseFloat(negative ? retorno * -1 : retorno);\n  }\n\n  static setMask(element, args) {\n    if (typeof document === 'undefined') throw 'This function only works on client side';\n\n    const input = typeof element == 'string' ? document.querySelector(element) : element;    \n\n    if (args) SimpleMaskMoney.args = args;\n\n    input.addEventListener('input', e => {\n      const oldValue = input.value;\n      const newValue = SimpleMaskMoney.format(oldValue);\n      const position = implanter.getCaretPosition(input);\n      const move = implanter.indexMove(newValue, oldValue);\n      \n      input.value = newValue;\n      input._value = newValue;\n      \n      implanter.setCaretPosition(input, position - move);\n\n      !(e instanceof Event) && input.dispatchEvent(new Event('input'));\n    });\n\n    input['formatToNumber'] = () => SimpleMaskMoney.formatToNumber(input.value);\n\n    return input;\n  }\n};\n"],"names":["module","args","allowNegative","negativeSignAfter","decimalSeparator","fixed","fractionDigits","prefix","suffix","thousandsSeparator","merge","this","preffix","Args","size","padEnd","completer","value","retorno","i","length","isFinite","replace","includes","substring","addingCompleterFromEnd","regexp","RegExp","match","addingAutoComplete","separator","regexpFraction","decimals","dezenas","character","hundreds","Math","ceil","regexpHundreds","replacement","addingCompleterFromStart","addingDecimalSeparator","input","toString","removingPrefix","removingSuffix","removeSeparator","onlyNumber","removingCompleterFromStart","emptyOrInvalid","isNaN","parseFloat","formatDecimal","addingHundredsSeparator","addingPrefix","addingSuffix","position","selectionStart","document","selection","focus","range","createRange","text","moveStart","index","setSelectionRange","createTextRange","collapse","moveEnd","select","newValue","oldValue","move","_args","_core","Core","defineProperty","formatToNumber","SimpleMaskMoney","format","setMask","negative","indexOf","formatation","numberToText","textToNumber","lengthWithoutDecimals","element","querySelector","addEventListener","implanter","_value","e","Event","dispatchEvent"],"mappings":"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"}